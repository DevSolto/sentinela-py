Metadata-Version: 2.4
Name: sentinela
Version: 0.1.0
Summary: Coletor modular de notícias em portais com MongoDB
Author: Sentinela
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.31
Requires-Dist: beautifulsoup4>=4.12
Requires-Dist: pymongo>=4.6
Requires-Dist: fastapi>=0.111
Requires-Dist: uvicorn[standard]>=0.29
Requires-Dist: sse-starlette>=2.0
Requires-Dist: python-dotenv>=1.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4; extra == "dev"

# Sentinela

Projeto Python modularizado para raspagem de dados em portais de notícia seguindo princípios SOLID e orientação a objetos. O projeto permite cadastrar portais com seletores CSS personalizados, coletar notícias em intervalos de datas e persistir o resultado em um banco MongoDB.

## Arquitetura

A solução foi organizada em camadas para favorecer separação de responsabilidades:

- **Domain**: entidades (`Portal`, `Article`), objetos de valor (`Selector`) e contratos de repositório.
- **Application**: serviços de caso de uso (`PortalRegistrationService`, `NewsCollectorService`).
- **Infrastructure**: implementação de scraping com Requests + BeautifulSoup, repositórios MongoDB e construção do container de dependências.
- **API**: camada REST construída com FastAPI expondo operações de cadastro de portais, coleta e consulta de notícias.

Essa separação facilita a substituição de componentes (por exemplo, outro banco de dados ou motor de scraping) sem alterar as camadas superiores.

## Requisitos

- Python 3.11+
- MongoDB acessível (padrão `mongodb://localhost:27017` e banco `sentinela`)
- Dependências Python listadas em `pyproject.toml`

Configure a conexão com MongoDB através das variáveis de ambiente:

```bash
export MONGO_URI="mongodb://localhost:27017"
export MONGO_DATABASE="sentinela"
```

## Instalação

Crie um ambiente virtual e instale o pacote em modo editável:

```bash
python -m venv .venv
source .venv/bin/activate
pip install -e .
```

## Executando a API

Após instalar o pacote, inicie a API REST com o comando:

```bash
sentinela-api
```

O serviço utiliza o FastAPI e fica disponível por padrão em `http://127.0.0.1:8000`. A documentação interativa pode ser acessada em `http://127.0.0.1:8000/docs`.

### Cadastro de portal (`POST /portals`)

Envie o corpo JSON com a configuração do portal:

```bash
curl -X POST http://127.0.0.1:8000/portals \
  -H "Content-Type: application/json" \
  -d '{
        "name": "Noticias Exemplo",
        "base_url": "https://www.exemplo.com",
        "listing_path_template": "/arquivo/{date}",
        "selectors": {
          "listing_article": {"query": "article.card"},
          "listing_title": {"query": "h2 a"},
          "listing_url": {"query": "h2 a", "attribute": "href"},
          "listing_summary": {"query": "p.resumo"},
          "article_content": {"query": "div.conteudo"},
          "article_date": {"query": "time", "attribute": "datetime"}
        }
      }'
```

### Listagem de portais (`GET /portals`)

```bash
curl http://127.0.0.1:8000/portals
```

### Coleta de notícias (`POST /collect`)

```bash
curl -X POST http://127.0.0.1:8000/collect \
  -H "Content-Type: application/json" \
  -d '{"portal": "Noticias Exemplo", "start_date": "2024-05-01", "end_date": "2024-05-03"}'
```

### Consulta de artigos (`GET /articles`)

```bash
curl "http://127.0.0.1:8000/articles?portal=Noticias%20Exemplo&start_date=2024-05-01&end_date=2024-05-03"
```

As respostas são retornadas em JSON, incluindo o conteúdo completo e a data de publicação das notícias.

## Testes

Os testes (quando houver) podem ser executados com:

```bash
pytest
```

## Extensão

- Substitua `RequestsSoupScraper` por outra implementação de `Scraper` caso necessite Selenium ou outro motor.
- Crie uma implementação alternativa de repositório para persistir em outros bancos respeitando os contratos do domínio.

